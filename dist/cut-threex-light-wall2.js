!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports["cut-threex-light-wall2"]=n():e["cut-threex-light-wall2"]=n()}("undefined"!=typeof self?self:this,function(){return function(e){function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="../",n(n.s=1)}([function(e,n,t){"use strict";function o(e,n){return void 0===e?n:e}n.a=o},function(e,n,t){"use strict";function o(e){var n=Object(i.a)(e.renderOrder,2),t=new THREE.Object3D;t.renderOrder=n;var o=Object(r.a)(e),u=Object(a.a)(e),c=new THREE.Mesh(o,u);return c.renderOrder=n,t.update=function(e){c.material.uniforms.time.value=e},t.add(c),t}Object.defineProperty(n,"__esModule",{value:!0}),n.default=o;var r=t(2),a=t(3),i=t(0)},function(e,n,t){"use strict";function o(e){var n=Object(r.a)(e.points,[]);n.push(n[0]);for(var t=Object(r.a)(e.height,120),o=[],a=[],i=0,u=o.length,c=a.length;i<n.length-1;i++){var l=n[i],f=n[i+1];o[u++]=l.x,o[u++]=l.y,o[u++]=0,a[c++]=0,a[c++]=0,o[u++]=f.x,o[u++]=f.y,o[u++]=0,a[c++]=1,a[c++]=0,o[u++]=l.x,o[u++]=l.y,o[u++]=t,a[c++]=0,a[c++]=1,o[u++]=l.x,o[u++]=l.y,o[u++]=t,a[c++]=0,a[c++]=1,o[u++]=f.x,o[u++]=f.y,o[u++]=0,a[c++]=1,a[c++]=0,o[u++]=f.x,o[u++]=f.y,o[u++]=t,a[c++]=1,a[c++]=1}var s=new THREE.BufferGeometry;return s.addAttribute("position",new THREE.BufferAttribute(new Float32Array(o),3)),s.addAttribute("uv",new THREE.BufferAttribute(new Float32Array(a),2)),s}n.a=o;var r=t(0)},function(e,n,t){"use strict";function o(e){var n=Object(r.a)(e.depthWrite,!1),t=Object(r.a)(e.depthTest,!0),o=Object(r.a)(e.blending,THREE.AdditiveBlending),i=Object(r.a)(e.side,THREE.DoubleSide),u=Object(r.a)(e.fog,!0),c=Object(r.a)(e.transparent,!0),l=Object(a.a)(e);return new THREE.ShaderMaterial({uniforms:l.uniforms,vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,blending:o,depthWrite:n,depthTest:t,side:i,fog:u,transparent:c})}n.a=o;var r=t(0),a=t(4)},function(e,n,t){"use strict";function o(e){var n=Object(r.a)(e.color,"#33CCFF"),t=Object(r.a)(e.opacity,1),o=Object(r.a)(e.hiz,.15),a=Object(r.a)(e.useFloater,!1);return{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,{time:{type:"f",value:0},color:{type:"c",value:new THREE.Color(n)},opacity:{type:"f",value:t},hiz:{type:"f",value:o},useFloater:{type:"b",value:a}}]),vertexShader:"\n    varying vec2 texCoord;\n    "+THREE.ShaderChunk.fog_pars_vertex+"\n    void main() {\n      texCoord = uv;\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * mvPosition;\n      "+THREE.ShaderChunk.fog_vertex+"\n    }",fragmentShader:"\n    precision lowp float;\n\n    uniform float time;\n    uniform vec3 color;\n    uniform float hiz;\n    uniform float opacity;\n    uniform vec2 resolution;\n    uniform bool useFloater;\n    "+THREE.ShaderChunk.common+"\n    "+THREE.ShaderChunk.fog_pars_fragment+"\n    varying vec2 texCoord;\n    \n    float snow(vec2 uv,float scale) {\n      float w=smoothstep(9.,0.,-uv.y*(scale/10.));\n      if(w<.1)return 0.;\n      uv.y-=time/scale;\n      uv*=scale;\n      vec2 s=floor(uv),f=fract(uv),p;\n      float k=3.,d;\n      p=.5+.35*sin(11.*fract(sin((s+p+scale)*mat2(7,3,6,5))*5.))-f;\n      d=length(p);\n      k=min(d,k);\n      k=smoothstep(0.,k,sin(f.x+f.y)*0.01);\n      return k*w;\n    }\n\n    void main()\n    {\n      vec2 uv = texCoord;\n\n      float sin = sin((uv.y - time * hiz) / 0.025);\n      float high = 0.9;\n      float medium = 0.4;\n      if (sin > high) {\n        gl_FragColor = vec4( mix(vec3(.8, 1., 1.), color, (1.-sin)/(1.-high)), 1.);\n      } else if(sin > medium) {\n        gl_FragColor = vec4( color, mix(1., 0.15, 1.-(sin - medium)/(high-medium)));\n      } else {\n        gl_FragColor = vec4( color, 0.15);\n      }\n      vec3 fade = vec3(smoothstep(0.7,0.4,clamp(-(1.-uv.y)*.25+.8,0.,.75)), color.g, color.b);\n      if (useFloater) {\n        float c=snow(uv,30.)*.3;\n        c+=snow(uv,20.)*.5;\n        c+=snow(uv,15.)*.8;\n        c+=snow(uv,10.);\n        c+=snow(uv,8.);\n        c+=snow(uv,6.);\n        c+=snow(uv,5.);\n        float modulo = mod(time, 10.0);\n        if(modulo > 5.0) {\n          modulo -= ((modulo - 5.0) * 2.0); \n        }\n        modulo /= 5.0;\n        modulo += 0.35;\n        if(modulo > 1.0) {\n          modulo = 1.0;\n        }\n        gl_FragColor += vec4(c * modulo, c * modulo, 0,c);\n      }\n      gl_FragColor += vec4(fade, fade.x * 2.0);\n      gl_FragColor.a *= (1.-uv.y) * opacity;\n      "+THREE.ShaderChunk.fog_fragment+"\n    }"}}n.a=o;var r=t(0)}])});